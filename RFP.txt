Итоговая аттестация по Python
Цель проекта: разработать прототип промышленной системы учёта заказов, клиентов и
товаров с графическим интерфейсом, базой данных и возможностью анализа данных.
Сценарий
Создайте настольное приложение для менеджеров интернет-магазина. Оно должно
позволять:
- регистрировать клиентов и их контактные данные;
- добавлять заказы и связанные товары;
- просматривать, фильтровать, сортировать и анализировать заказы и клиентов;
- экспортировать и импортировать данные в/из различных форматов (CSV, JSON);
- визуализировать данные (например, динамика продаж, топовые товары и пр.);
- реализовать базовые инструменты администрирования через GUI (tkinter).
Требования к проекту
1. Базовая примерная (менять можно) структура проекта (модули, пакеты)
• models.py — классы данных (товар, клиент, заказ);
• db.py — работа с SQLite (или CSV/JSON при отсутствии SQL);
• gui.py — интерфейс;
• analysis.py — функции визуализации и анализа данных;
• main.py — точка входа в программу.
2. Применение ООП
• Используйте классы для клиентов, товаров, заказов.
• Продемонстрируйте инкапсуляцию, наследование, полиморфизм.
3. Работа с файлами и форматами
• Импорт и экспорт в/из CSV и JSON;
• Хранение данных между запусками (файлы или SQLite).
4. GUI (tkinter)
• Интерфейс для добавления клиента, создания заказа, поиска по базе.
• Элементы: формы, списки, кнопки, фильтры.
5. Визуализация и анализ
• Использовать pandas, matplotlib, seaborn, networkx:
• Топ 5 клиентов по числу заказов;
• Динамика количества заказов по датам;
• Построение графа связей клиентов (по географии/общим товарам).6. Регулярные выражения
• Проверка email клиента, номера телефона и формата адреса доставки.
7. Функции и сортировки
• Функции с параметрами, рекурсией, лямбда-выражениями.
• Реализовать собственную сортировку заказов по дате/стоимости.
8. Обработка ошибок
• Использовать конструкцию try...except для обработки ошибок.
9. Unit-тесты
• Покрыть модуль models.py и analysis.py тестами с использованием unittest.
10. Документирование
• Весь код должен содержать docstrings в формате numpydoc.
• Сгенерировать документацию через sphinx.
11. Контроль версий
• Проект должен быть размещён на GitHub (с README.md, .gitignore, историей
коммитов).
Критерии оценки
Критерий Баллы
Корректная структура и ООП 25
Работа с файлами и базой 10
Графический интерфейс (tkinter) 10
Анализ и визуализация данных 10
Использование регулярных выражений 5
Обработка ошибок 5
Тестирование 10
Документация 5
Работа с Git 5
Общая архитектура и читаемость кода 5
Полнота реализации ТЗ 10
Итого 100Результат
Выложите проект на GitHub. В README.md должна быть краткая инструкция по запуску,
описание модулей и скриншоты.